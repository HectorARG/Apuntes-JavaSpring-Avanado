**¿Qué es JPA?
Jpa es una especificación de Java, standar, para un framework ORM. Quiere decir que son uan serie de reglas que Java define para que cualquier framework que quierea interactura con la BD de Java, tenga que seguir.
Los frameworks mas populares de Java para este fin son:
Hibernate
TopLink
EclipseLink
ObjectDB
<h3>Anotaciones JPA</h3>
JPA utiliza anotaciones para conectar clases a tablas de la BD y asi evitar hacerlo de manera nativa con SQL.
@Entity. Indica a una clase de java que esta representando una tabla de nuestra BD.
@Table. Recibe el nombre de la tabla a la cual esta mapeando la clase.
@column. Se le pone a los atributos de la clase, no es obligatoria, se indica sólo cuando el nombre de la columna es diferente al nombre del 
atributo de la tabla.
@id amd @EmbededID. Es el atributo como clave primaria de la tabla dentro de la clase. @id se utiliza cuando es clave primaria sencilla y 
@EmbededID cuando es una clave primaria compuesta.
@GeneratedValue. Permite generar automáticamente generar valores para las clases primarias en nuestras clases
@OneToMany and @MatyToOne. Representar relaciones

**Conocer qué es Spring Data
Spring Data NO es una implementacion de JPA, sino mas bien es un proyecto que usa JPA para ofrecer funcionalidaes extra en la gestion de tareas 
desde JAVA a las base de datos.
Spring Data internamente tiene varios subproyectos, entre ellos: Spring Data JPA y Spring Data JDBC, para conectarnos a BD relacionales (SQL). 
Spring Data MongoDB y Spring Data Cassandra, son proyectos para conectarnos a BD no relacionales.
La tarea principal de Spring Data es optimizar tareas repitivas.
Spring data nos provee de respositorios sin codigo, nos permiten hacer todo tipo de operaciones en BD (CRUD) sin utilizar una linea de código.
También nos provee de auditorías transparentes, por ello, posee un motor de auditorias que nos permite saber cuadno se insertó un registro, cuando 
se borró, cuando se actualizo en la BD, etc.
<h3>Implementación en el proyecto Market.</h3>
Se busca en MAVEN el repositorio Spring Boot Starter Data JPA, se copia el group y el name en las dependencias del archivo build.gradle de nuestro 
proyecto quedando de la siguiente manera.

**@Repository: le indicamos a la clase que es la encarga de interactuar con la base de datos.
**@Component: le indicamos que es un componente de spring.
El primero es mejor porque indicamos el tipo de componente que es.

**DATA MAPPER
Convertir o traducir dos objetos que pueden hacer una misma labor
No exponer directamente la base datos medianta la API
Esto garantiza que ningun agente externo, vizualice la forma del diseño de la base de datos
Desacoplar la API de una base de datos puntual
En el caso que se desee integrar una nueva base de datos con otros campos, pero que sea para el mismo proyecto, 
no es necesario cambiar todo el código, simplemente se crea otro traductor que sirva para traducir la nueva tabla al dominio
Evita tener campos innecesarios en la API
Evitar mezclar idiomas en el dominio

**@Service:
Intermediario entre el controlador de la API y el repositorio